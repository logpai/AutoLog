DEBUG org.apache.kafka.clients.producer.internals.TransactionManager$TxnOffsetCommitHandler: Received TxnOffsetCommit response for consumer group <*>: <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Requesting metadata update for topic <*>.
TRACE org.apache.kafka.clients.producer.KafkaProducer: Attempting to append record <*> with callback <*> to topic <*> partition <*>
TRACE org.apache.kafka.clients.producer.internals.RecordAccumulator: Allocating a new <*> byte message buffer for topic <*> partition <*> with remaining timeout <*>ms
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Retrying append due to new batch creation for topic <*> partition <*>. The old partition was <*>
TRACE org.apache.kafka.clients.producer.internals.RecordAccumulator: Allocating a new <*> byte message buffer for topic <*> partition <*> with remaining timeout <*>ms
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Waking up the sender since topic <*> partition <*> is either full or getting a new batch
DEBUG org.apache.kafka.clients.producer.KafkaProducer: Exception occurred during message send:
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
ERROR org.apache.kafka.clients.consumer.internals.Fetcher$3: Discarding error in ListOffsetResponse because another error is pending
INFO org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandler: Successfully validated token with principal <*>: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: FindCoordinator request hit fatal exception
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
INFO org.apache.kafka.clients.FetchSessionHandler: Node <*> sent an invalid incremental fetch response with <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator$ReauthInfo: Authentication complete; session max lifetime from broker config=<*> ms, credential expiration=<*> (<*> ms); session expiration = <*> (<*> ms), sending <*> ms to client
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
DEBUG org.apache.kafka.clients.NetworkClient: Sending <*> request with header <*> and timeout <*> to node <*>: <*>
DEBUG org.apache.kafka.common.metrics.stats.Percentiles: Received value <*> which is greater than max recordable value <*>, will be pinned to the max value
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
ERROR org.apache.kafka.clients.admin.KafkaAdminClient$35: Unregister broker request for broker ID <*> failed: <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Resetting idempotent producer ID. ID and epoch before reset are <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId set to <*> with epoch <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Set SASL client state to <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Queueing <*> with a timeout <*> ms from now.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending leader SyncGroup to coordinator <*>: <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.common.security.ssl.SslFactory: Validation of dynamic config update of SSLFactory failed.
ERROR org.apache.kafka.common.network.SslTransportLayer: Renegotiation requested, but it is not supported, channelId <*>, appReadBuffer pos <*>, netReadBuffer pos <*>, netWriteBuffer pos <*> handshakeStatus <*>
ERROR org.apache.kafka.common.network.SslTransportLayer: Renegotiation requested, but it is not supported, channelId <*>, appReadBuffer pos <*>, netReadBuffer pos <*>, netWriteBuffer pos <*> handshakeStatus <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Sending asynchronous auto-commit of offsets <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
INFO org.apache.kafka.clients.producer.KafkaProducer: Closing the Kafka producer with timeoutMillis = <*> ms.
INFO org.apache.kafka.clients.producer.KafkaProducer: Proceeding to force close the producer since pending requests could not be completed within timeout <*> ms.
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
INFO org.apache.kafka.common.utils.AppInfoParser: App info <*> for <*> unregistered
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Leader <*> for partition <*> is unavailable for fetching offset until reconnect backoff expires
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Sending ListOffsetRequest <*> to broker <*>
INFO org.apache.kafka.clients.NetworkClient: Disconnecting from node <*> due to request timeout.
DEBUG org.apache.kafka.clients.NetworkClient: Cancelled in-flight <*> request with correlation id <*> due to node <*> being disconnected (elapsed time since creation: <*>ms, elapsed time since send: <*>ms, request timeout: <*>ms): <*>
DEBUG org.apache.kafka.clients.NetworkClient: Cancelled in-flight <*> request with correlation id <*> due to node <*> being disconnected (elapsed time since creation: <*>ms, elapsed time since send: <*>ms, request timeout: <*>ms): <*>
WARN org.apache.kafka.clients.NetworkClient: Connection to node <*> (<*>) could not be established. Broker may not be available.
INFO org.apache.kafka.clients.NetworkClient: Cancelled in-flight <*> request with correlation id <*> due to node <*> being disconnected (elapsed time since creation: <*>ms, elapsed time since send: <*>ms, request timeout: <*>ms)
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.admin.internals.ListConsumerGroupOffsetsHandler: `OffsetFetch` request for group id <*> failed due to error <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.common.metrics.Metrics$ExpireSensorTask: Removing expired sensor <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
INFO org.apache.kafka.clients.producer.KafkaProducer: Closing the Kafka producer with timeoutMillis = <*> ms.
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
INFO org.apache.kafka.common.utils.AppInfoParser: App info <*> for <*> unregistered
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Skipping transition to abortable error state since the transaction is already being aborted. Underlying exception: 
DEBUG org.apache.kafka.common.security.ssl.SslFactory: Validation of dynamic config update of SSLFactory failed.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
INFO org.apache.kafka.clients.ClusterConnectionStates: Hostname for node <*> changed from <*> to <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
ERROR org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener: Reclaimed buffer of size <*> and identity <*> that was not properly release()ed. This is a bug.
INFO org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener: GC listener shutting down
DEBUG org.apache.kafka.common.security.JaasContext: System property \'java.security.auth.login.config\' and Kafka SASL property \'sasl.jaas.config\' are not set, using default JAAS configuration.
INFO org.apache.kafka.clients.consumer.KafkaConsumer: Seeking to offset <*> for partition <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor: <*> is assigned to more than one consumer.
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor: Expected partition \'<*>\' to be assigned to a consumer
WARN org.apache.kafka.clients.admin.internals.ListConsumerGroupOffsetsHandler: Skipping return offset for <*> due to error <*>.
ERROR org.apache.kafka.clients.admin.internals.PartitionLeaderStrategy: Received authorization failure for topic <*> in `Metadata` response
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator$JoinGroupResponseHandler: Received successful JoinGroup response: <*>
DEBUG org.apache.kafka.clients.producer.internals.ProducerMetadata: Removing unused topic <*> from the metadata list, expiryMs <*> now <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: (Re-)joining group
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending JoinGroup (<*>) to coordinator <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: (Re-)joining group
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending JoinGroup (<*>) to coordinator <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Resetting generation <*>due to: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Request joining group due to: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Resetting generation <*>due to: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Request joining group due to: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Resetting generation <*>due to: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Request joining group due to: <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
DEBUG org.apache.kafka.common.network.Selector: Created socket with SO_RCVBUF = <*>, SO_SNDBUF = <*>, SO_TIMEOUT = <*> to node <*>
WARN org.apache.kafka.common.network.Selector: Should never happen: re-authentication latency for a re-authenticated channel was null; continuing...
DEBUG org.apache.kafka.common.network.Selector: Successfully <*>authenticated with <*>
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
DEBUG org.apache.kafka.common.network.Selector: Created socket with SO_RCVBUF = <*>, SO_SNDBUF = <*>, SO_TIMEOUT = <*> to node <*>
WARN org.apache.kafka.common.network.Selector: Should never happen: re-authentication latency for a re-authenticated channel was null; continuing...
DEBUG org.apache.kafka.common.network.Selector: Successfully <*>authenticated with <*>
TRACE org.apache.kafka.common.network.Selector: About to close the idle connection from <*> due to being idle for <*> millis
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator$OffsetFetchResponseHandler: Failed to fetch offset for partition <*>: <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
ERROR org.apache.kafka.clients.consumer.internals.Fetcher$3: Discarding error in ListOffsetResponse because another error is pending
DEBUG org.apache.kafka.common.security.oauthbearer.secured.JaasOptionsUtils: Created SSLSocketFactory: <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.common.record.ControlRecordType: Received unknown control record key version <*>. Parsing as version <*>
DEBUG org.apache.kafka.common.record.ControlRecordType: Received unknown control record key version <*>. Parsing as version <*>
DEBUG org.apache.kafka.common.record.ControlRecordType: Received unknown control record key version <*>. Parsing as version <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.clients.consumer.internals.Fetcher: Returning <*> fetched records at offset <*> for assigned partition <*>
TRACE org.apache.kafka.clients.consumer.internals.Fetcher: Updating fetch position from <*> to <*> for partition <*> and returning <*> records from `poll()`
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Ignoring fetched records for <*> at offset <*> since the current position is <*>
TRACE org.apache.kafka.clients.consumer.internals.Fetcher: Draining fetched records for partition <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.clients.consumer.internals.Fetcher: Not fetching from <*> for partition <*> since it is marked offline or is missing from our metadata, using the leader instead.
TRACE org.apache.kafka.clients.consumer.internals.Fetcher: Not fetching from <*> for partition <*> since it is marked offline or is missing from our metadata, using the leader instead.
TRACE org.apache.kafka.clients.consumer.internals.Fetcher: Not fetching from <*> for partition <*> since it is marked offline or is missing from our metadata, using the leader instead.
TRACE org.apache.kafka.clients.consumer.internals.Fetcher: Skipping fetch for partition <*> because node <*> is awaiting reconnect backoff
DEBUG org.apache.kafka.clients.FetchSessionHandler$Builder: Built incremental fetch <*> for node <*>. Added <*>, altered <*>, removed <*>, replaced <*> out of <*>
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Sending <*> <*> to broker <*>
TRACE org.apache.kafka.clients.consumer.KafkaConsumer: Polling for fetches with timeout <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.common.record.ControlRecordType: Received unknown control record key version <*>. Parsing as version <*>
DEBUG org.apache.kafka.common.record.EndTransactionMarker: Received end transaction marker value version <*>. Parsing as version <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Request joining group due to: <*>
ERROR org.apache.kafka.clients.admin.internals.DeleteConsumerGroupsHandler: `DeleteConsumerGroups` request for group id <*> failed due to unexpected error <*>
DEBUG org.apache.kafka.clients.NetworkClient$DefaultMetadataUpdater: Sending metadata request <*> to node <*>
TRACE org.apache.kafka.clients.NetworkClient: No version information found when sending <*> with correlation id <*> to node <*>. Assuming version <*>.
DEBUG org.apache.kafka.clients.NetworkClient: Sending <*> request with header <*> and timeout <*> to node <*>: <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Sending synchronous auto-commit of offsets <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
TRACE org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Sending OffsetCommit request with <*> to coordinator <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Auto-commit of offsets <*> timed out before completion
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
INFO org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLogin: Successfully logged in.
DEBUG org.apache.kafka.common.security.kerberos.KerberosLogin: [Principal=<*>]: It is a Kerberos ticket
DEBUG org.apache.kafka.common.security.oauthbearer.secured.LoginAccessTokenValidator: getClaim - <*>: <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.LoginAccessTokenValidator: getClaim - <*>: <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.LoginAccessTokenValidator: getClaim - <*>: <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.LoginAccessTokenValidator: getClaim - <*>: <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.Metadata: Requesting metadata update for topic <*> due to error <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
ERROR org.apache.kafka.clients.Metadata: Metadata response reported invalid topics <*>
ERROR org.apache.kafka.clients.Metadata: Topic authorization failed for topics <*>
DEBUG org.apache.kafka.clients.Metadata: Updated cluster metadata updateVersion <*> to <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Executing onJoinPrepare with generation <*> and memberId <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Asynchronous auto-commit of offsets failed with retryable error: <*>. Will retry it.
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Revoke previously assigned partitions <*>
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: The pause flag in partitions [<*>] will be removed due to revocation.
WARN org.apache.kafka.common.record.MemoryRecords: Record batch from <*> with last offset <*> exceeded max record batch size <*> after cleaning (new size is <*>). Consumers with version earlier than ... may need to increase their fetch sizes.
WARN org.apache.kafka.common.record.MemoryRecords: Record batch from <*> with last offset <*> exceeded max record batch size <*> after cleaning (new size is <*>). Consumers with version earlier than ... may need to increase their fetch sizes.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.CommonClientConfigs: Disabling exponential reconnect backoff because <*> is set, but <*> is not.
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Updating preferred read replica for partition <*> to <*>, set to expire at <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Set SASL client state to <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator$ReauthInfo: Finished <*> with no session expiration and no session re-authentication
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka version: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka commitId: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka startTimeMs: <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Set SASL client state to <*>
DEBUG org.apache.kafka.common.security.scram.internals.ScramSaslServer: Setting SASL/<*> server state to <*>
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to abortable error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Ignoring batch <*> with producer id <*>, epoch <*>, and sequence number <*> since the producer is already in fatal error state
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Successfully produced messages to <*> with base offset <*>.
DEBUG org.apache.kafka.clients.producer.internals.ProducerBatch: ProduceResponse returned <*> for <*> after batch with base offset <*> had already been <*>.
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Skipping fetching records for assigned partition <*> because it is paused
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Queueing <*> with a timeout <*> ms from now.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.security.authenticator.LoginManager: <*> released
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Requesting metadata update.
ERROR org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: With the COOPERATIVE protocol, owned partitions cannot be reassigned to other members; however the assignor has reassigned partitions <*> which are still owned by some members
<INIT> org.apache.kafka.common.message.DescribeLogDirsResponseData$DescribeLogDirsResult: \'logDir\' field is too long to be serialized
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator$SyncGroupResponseHandler: SyncGroup failed: <*> Need to re-join the group. Sent generation was <*>
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Lost previously assigned partitions <*>
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
WARN org.apache.kafka.clients.ClientUtils: Couldn\'t resolve server <*> from <*> as DNS resolution of the canonical hostname <*> failed for <*>
INFO org.apache.kafka.clients.FetchSessionHandler: Error sending fetch request <*> to node <*>:
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Received user wakeup
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
ERROR org.apache.kafka.clients.Metadata: Metadata response reported invalid topics <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
ERROR org.apache.kafka.clients.producer.internals.Sender: Aborting producer batches due to fatal error
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Aborting batch for partition <*>
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Aborting batch for partition <*>
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Aborting batch for partition <*>
DEBUG org.apache.kafka.common.security.ssl.SslFactory: Validation of dynamic config update of SSLFactory failed.
INFO org.apache.kafka.common.security.ssl.SslFactory: Created new <*> SSL engine builder with keystore <*> truststore <*>
DEBUG org.apache.kafka.common.security.scram.internals.ScramSaslServer: Setting SASL/<*> server state to <*>
INFO org.apache.kafka.clients.admin.internals.AdminMetadataManager: Metadata update failed
TRACE org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: <*> for mechanism=<*>: <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient: Moving hard shutdown time forward.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient: Waiting for the I/O thread to exit. Hard shutdown in <*> ms.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient: Kafka admin client closed.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> failed: <*>. Beginning retry #<*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Timed out <*> pending calls.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: (Re-)joining group
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending JoinGroup (<*>) to coordinator <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Thread starting
INFO org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Forcing a hard I/O thread shutdown. Requests in progress will be aborted.
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
INFO org.apache.kafka.common.utils.AppInfoParser: App info <*> for <*> unregistered
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Timed out <*> call(s) with assigned nodes.
INFO org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Timed out <*> remaining operation(s) during close.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Exiting AdminClientRunnable thread.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Resetting generation <*>due to: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Request joining group due to: <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Set SASL client state to <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator$ReauthInfo: Finished <*> with no session expiration and no session re-authentication
TRACE org.apache.kafka.clients.producer.KafkaProducer: Requesting metadata update for partition <*> of topic <*>.
TRACE org.apache.kafka.clients.producer.internals.RecordAccumulator: Allocating a new <*> byte message buffer for topic <*> partition <*> with remaining timeout <*>ms
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Begin adding new partition <*> to transaction
TRACE org.apache.kafka.clients.producer.KafkaProducer: Waking up the sender since topic <*> partition <*> is either full or getting a new batch
DEBUG org.apache.kafka.clients.producer.KafkaProducer: Exception occurred during message send:
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> failed: <*>. Beginning retry #<*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> attempting protocol downgrade and then retry.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> failed: <*>. Beginning retry #<*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> failed with non-retriable exception after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Timed out <*> pending calls.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Timed out <*> pending calls.
INFO org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Disconnecting from <*> due to timeout while awaiting <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Timed out <*> call(s) in flight.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Timed out <*> call(s) in flight.
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Trying to choose nodes for <*> at <*>
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Trying to choose nodes for <*> at <*>
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Assigned <*> to node <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Unable to choose node for <*>
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Assigned <*> to node <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Unable to choose node for <*>
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Assigned <*> to node <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Unable to choose node for <*>
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Trying to choose nodes for <*> at <*>
INFO org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Disconnecting from <*> and revoking <*> node assignment(s) because the node is taking too long to become ready.
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Entering KafkaClient#poll(timeout=<*>)
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: KafkaClient#poll retrieved <*> response(s)
ERROR org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Internal server error on <*>: ignoring call <*> in correlationIdToCall that did not exist in callsInFlight
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: <*> got response <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Hard shutdown in <*> ms.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Hard shutdown in <*> ms.
INFO org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Forcing a hard I/O thread shutdown. Requests in progress will be aborted.
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending Heartbeat request with generation <*> and member id <*> to coordinator <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.KafkaConsumer: Initializing the Kafka consumer
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.clients.ClientUtils: Couldn\'t resolve server <*> from <*> as DNS resolution failed for <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
WARN org.apache.kafka.common.config.AbstractConfig: The configuration \'<*>\' was supplied but isn\'t a known config.
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka version: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka commitId: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka startTimeMs: <*>
DEBUG org.apache.kafka.clients.consumer.KafkaConsumer: Kafka consumer initialized
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.record.MultiRecordsSend: Bytes written as part of multi-send call: <*>, total bytes written so far: <*>, expected bytes to write: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Failing OffsetCommit request since the consumer is not part of an active group
ERROR org.apache.kafka.common.serialization.ListDeserializer: Failed to construct list due to 
ERROR org.apache.kafka.common.serialization.ListDeserializer: Ran out of bytes in serialized list
TRACE org.apache.kafka.common.serialization.ListDeserializer: Deserialized list so far: <*>
TRACE org.apache.kafka.common.security.authenticator.LoginManager: <*> acquired
DEBUG org.apache.kafka.clients.consumer.KafkaConsumer: Committing offsets: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
TRACE org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Sending OffsetCommit request with <*> to coordinator <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
TRACE org.apache.kafka.common.memory.SimpleMemoryPool: released buffer of size <*>
TRACE org.apache.kafka.clients.consumer.internals.Heartbeat: Sending heartbeat request with <*>ms remaining on timer
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Leader for partition <*> is unknown for fetching offset <*>
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Sending ListOffsetRequest <*> to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Sending ListOffsetRequest <*> to broker <*>
DEBUG org.apache.kafka.common.utils.Utils: Non-atomic move of <*> to <*> succeeded after atomic move failed due to <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Failing OffsetCommit request since the consumer is not part of an active group
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to abortable error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
INFO org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Forcing a hard I/O thread shutdown. Requests in progress will be aborted.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: <*> for mechanism=<*>: <*>
DEBUG org.apache.kafka.clients.NetworkClient: Sending <*> request with header <*> and timeout <*> to node <*>: <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Sending asynchronous auto-commit of offsets <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Failing OffsetCommit request since the consumer is not part of an active group
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
DEBUG org.apache.kafka.clients.admin.internals.ListConsumerGroupOffsetsHandler: `OffsetFetch` request for group id <*> failed because the coordinator is still in the process of loading state. Will retry
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.clients.producer.KafkaProducer: Requesting metadata update for topic <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending leader SyncGroup to coordinator <*>: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
DEBUG org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule: Nothing here to abort
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Leader for partition <*> is unknown for fetching offset <*>
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Sending ListOffsetRequest <*> to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Sending ListOffsetRequest <*> to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Sending ListOffsetRequest <*> to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Leader <*> for partition <*> is unavailable for fetching offset until reconnect backoff expires
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.clients.admin.internals.DescribeTransactionsHandler: Response included transactionalId `<*>`, which was not requested
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Successfully produced messages to <*> with base offset <*>.
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor: <*> is assigned to more than one consumer.
DEBUG org.apache.kafka.clients.consumer.KafkaConsumer: Initializing the Kafka consumer
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.clients.ClientUtils: Couldn\'t resolve server <*> from <*> as DNS resolution of the canonical hostname <*> failed for <*>
WARN org.apache.kafka.common.security.JaasContext: Server config <*> should be prefixed with SASL mechanism name, ignoring config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module not specified in JAAS config
DEBUG org.apache.kafka.common.security.JaasContext: System property \'java.security.auth.login.config\' and Kafka SASL property \'sasl.jaas.config\' are not set, using default JAAS configuration.
WARN org.apache.kafka.common.network.ChannelBuilders: Broker configuration \'<*>\' is applied only to SSL listeners. Listener-prefixed configuration can be used to enable SSL client authentication for SASL_SSL listeners. In future releases, broker-wide option without listener prefix may be applied to SASL_SSL listeners as well. All configuration options intended for specific listeners should be listener-prefixed.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
WARN org.apache.kafka.common.config.AbstractConfig: The configuration \'<*>\' was supplied but isn\'t a known config.
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka version: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka commitId: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka startTimeMs: <*>
DEBUG org.apache.kafka.clients.consumer.KafkaConsumer: Kafka consumer initialized
DEBUG org.apache.kafka.clients.NetworkClient: Sending <*> request with header <*> and timeout <*> to node <*>: <*>
INFO org.apache.kafka.clients.NetworkClient: Client requested connection close from node <*>
DEBUG org.apache.kafka.clients.NetworkClient: Cancelled in-flight <*> request with correlation id <*> due to node <*> being disconnected (elapsed time since creation: <*>ms, elapsed time since send: <*>ms, request timeout: <*>ms): <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Handling Kafka request <*> during <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator$ReauthInfo: Authentication complete; session max lifetime from broker config=<*> ms, credential expiration=<*> (<*> ms); session expiration = <*> (<*> ms), sending <*> ms to client
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
TRACE org.apache.kafka.clients.admin.internals.AdminMetadataManager: Clearing cached controller node <*>.
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Requesting metadata update.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Begin adding offsets <*> for consumer group <*> to transaction
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Requesting metadata update.
TRACE org.apache.kafka.clients.producer.KafkaProducer: Requesting metadata update for topic <*>.
TRACE org.apache.kafka.clients.producer.internals.RecordAccumulator: Allocating a new <*> byte message buffer for topic <*> partition <*> with remaining timeout <*>ms
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Begin adding new partition <*> to transaction
TRACE org.apache.kafka.clients.producer.KafkaProducer: Waking up the sender since topic <*> partition <*> is either full or getting a new batch
DEBUG org.apache.kafka.clients.producer.KafkaProducer: Exception occurred during message send:
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Handling ListOffsetResponse response for <*>. Fetched offset <*>, timestamp <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Queueing <*> with a timeout <*> ms from now.
DEBUG org.apache.kafka.common.security.oauthbearer.secured.LoginAccessTokenValidator: getClaim - <*>: <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.LoginAccessTokenValidator: getClaim - <*>: <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.LoginAccessTokenValidator: getClaim - <*>: <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.LoginAccessTokenValidator: getClaim - <*>: <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: Removed a reference to <*>.  <*> reference(s) remaining.
WARN org.apache.kafka.clients.ClientUtils: Couldn\'t resolve server <*> from <*> as DNS resolution failed for <*>
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Updating cluster metadata to <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
WARN org.apache.kafka.clients.admin.KafkaAdminClient: Overriding the default value for <*> (<*>) with the explicitly configured request timeout <*>
WARN org.apache.kafka.common.config.AbstractConfig: The configuration \'<*>\' was supplied but isn\'t a known config.
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka version: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka commitId: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka startTimeMs: <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient: Kafka admin client initialized
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
INFO org.apache.kafka.common.metrics.Metrics: Metrics scheduler closed
INFO org.apache.kafka.common.metrics.Metrics: Metrics reporters closed
ERROR org.apache.kafka.clients.admin.internals.RemoveMembersFromConsumerGroupHandler: `LeaveGroup` request for group id <*> failed due to unexpected error <*>
INFO org.apache.kafka.clients.FetchSessionHandler: Error sending fetch request <*> to node <*>:
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Set SASL client state to <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Failing OffsetCommit request since the consumer is not part of an active group
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
TRACE org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Sending OffsetCommit request with <*> to coordinator <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
INFO org.apache.kafka.clients.consumer.internals.SubscriptionState: Seeking to <*> offset of partition <*>
INFO org.apache.kafka.common.security.kerberos.KerberosLogin: Initiating logout for <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Set SASL client state to <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator$ReauthInfo: Finished <*> with no session expiration and no session re-authentication
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator$OffsetCommitResponseHandler: Committed offset <*> for partition <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.NetworkClient: Sending <*> request with header <*> and timeout <*> to node <*>: <*>
WARN org.apache.kafka.common.record.MemoryRecords: Record batch from <*> with last offset <*> exceeded max record batch size <*> after cleaning (new size is <*>). Consumers with version earlier than ... may need to increase their fetch sizes.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending leader SyncGroup to coordinator <*>: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: Adding a new metric <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: entering performPendingMetricsOperations
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: adding metric <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: leaving performPendingMetricsOperations
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Leader <*> for partition <*> is unavailable for fetching offset until reconnect backoff expires
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Sending ListOffsetRequest <*> to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Leader <*> for partition <*> is unavailable for fetching offset until reconnect backoff expires
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Sending ListOffsetRequest <*> to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Sending ListOffsetRequest <*> to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Leader for partition <*> is unknown for fetching offset <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: producerId: <*>, send to partition <*> failed fatally. Reducing future sequence numbers by <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule: No tokens to commit, this login cannot be used to establish client connections
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.memory.SimpleMemoryPool: released buffer of size <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending follower SyncGroup to coordinator <*>: <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.common.record.ControlRecordType: Received unknown control record key version <*>. Parsing as version <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Resetting generation <*>due to: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Request joining group due to: <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.KafkaConsumer: Initializing the Kafka consumer
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.clients.ClientUtils: Couldn\'t resolve server <*> from <*> as DNS resolution of the canonical hostname <*> failed for <*>
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasContext: JAAS config property does not contain any login modules
DEBUG org.apache.kafka.common.security.JaasContext: System property \'java.security.auth.login.config\' and Kafka SASL property \'sasl.jaas.config\' are not set, using default JAAS configuration.
DEBUG org.apache.kafka.common.security.JaasContext: System property \'java.security.auth.login.config\' and Kafka SASL property \'sasl.jaas.config\' are not set, using default JAAS configuration.
WARN org.apache.kafka.common.network.ChannelBuilders: Broker configuration \'<*>\' is applied only to SSL listeners. Listener-prefixed configuration can be used to enable SSL client authentication for SASL_SSL listeners. In future releases, broker-wide option without listener prefix may be applied to SASL_SSL listeners as well. All configuration options intended for specific listeners should be listener-prefixed.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
WARN org.apache.kafka.common.config.AbstractConfig: The configuration \'<*>\' was supplied but isn\'t a known config.
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka version: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka commitId: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka startTimeMs: <*>
DEBUG org.apache.kafka.clients.consumer.KafkaConsumer: Kafka consumer initialized
TRACE org.apache.kafka.clients.NetworkClient: Found least loaded connecting node <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
ERROR org.apache.kafka.clients.producer.internals.ErrorLoggingCallback: Error when sending message to topic <*> with key: <*>, value: <*> with error:
DEBUG org.apache.kafka.common.security.oauthbearer.secured.HttpAccessTokenRetriever: handleInput - starting post for <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.HttpAccessTokenRetriever: handleInput - preparing to connect to <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.HttpAccessTokenRetriever: handleInput - preparing to write request body to <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.clients.producer.KafkaProducer: Requesting metadata update for partition <*> of topic <*>.
TRACE org.apache.kafka.clients.producer.internals.RecordAccumulator: Allocating a new <*> byte message buffer for topic <*> partition <*> with remaining timeout <*>ms
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Retrying append due to new batch creation for topic <*> partition <*>. The old partition was <*>
TRACE org.apache.kafka.clients.producer.internals.RecordAccumulator: Allocating a new <*> byte message buffer for topic <*> partition <*> with remaining timeout <*>ms
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Waking up the sender since topic <*> partition <*> is either full or getting a new batch
DEBUG org.apache.kafka.clients.producer.KafkaProducer: Exception occurred during message send:
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
TRACE org.apache.kafka.clients.admin.internals.AdminMetadataManager: Metadata is not ready: bootstrap nodes have not been initialized yet.
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Requesting metadata update.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Requesting metadata update for topic <*>.
TRACE org.apache.kafka.clients.producer.internals.RecordAccumulator: Allocating a new <*> byte message buffer for topic <*> partition <*> with remaining timeout <*>ms
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Begin adding new partition <*> to transaction
DEBUG org.apache.kafka.clients.producer.KafkaProducer: Exception occurred during message send:
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Ignoring the returned <*> since its partition <*> is no longer assigned
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Leader <*> for partition <*> is unavailable for fetching offset until reconnect backoff expires
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Ignoring the returned <*> since its partition <*> is no longer assigned
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Leader <*> for partition <*> is unavailable for fetching offset until reconnect backoff expires
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: FindCoordinator request hit fatal exception
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Setting offset for partition <*> to the committed offset <*>
TRACE org.apache.kafka.common.security.authenticator.SaslServerCallbackHandler: Client supplied realm: <*> 
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
ERROR org.apache.kafka.clients.producer.internals.TransactionManager$AddPartitionsToTxnHandler: Could not add partition <*> due to unexpected error <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to abortable error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
DEBUG org.apache.kafka.clients.admin.internals.AlterConsumerGroupOffsetsHandler: OffsetCommit request for group id <*> returned error <*>. Will rediscover the coordinator and retry.
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.clients.consumer.internals.Fetcher: Updating last stable offset for partition <*> to <*>
DEBUG org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandler: Token not provided, this login cannot be used to establish client connections
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Skipped assignment for returning static leader at generation <*>. The static leader will continue with its existing assignment.
TRACE org.apache.kafka.clients.admin.internals.AdminMetadataManager: Metadata is not ready: we have not fetched metadata from the bootstrap nodes yet.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Executing onJoinPrepare with generation <*> and memberId <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Sending asynchronous auto-commit of offsets <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Asynchronous auto-commit of offsets failed with retryable error: <*>. Will retry it.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: FindCoordinator request hit fatal exception
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
DEBUG org.apache.kafka.common.record.ControlRecordType: Received unknown control record key version <*>. Parsing as version <*>
<INIT> org.apache.kafka.common.message.DescribeLogDirsResponseData$DescribeLogDirsResult: non-nullable field logDir was serialized as null
TRACE org.apache.kafka.common.security.authenticator.LoginManager: <*> acquired
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Set SASL client state to <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: FindCoordinator request hit fatal exception
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Queueing <*> with a timeout <*> ms from now.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
WARN org.apache.kafka.common.network.ChannelBuilders: Broker configuration \'<*>\' is applied only to SSL listeners. Listener-prefixed configuration can be used to enable SSL client authentication for SASL_SSL listeners. In future releases, broker-wide option without listener prefix may be applied to SASL_SSL listeners as well. All configuration options intended for specific listeners should be listener-prefixed.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
INFO org.apache.kafka.common.memory.GarbageCollectedMemoryPool$GarbageCollectionListener: GC listener shutting down
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator$FindCoordinatorResponseHandler: FindCoordinator request failed due to <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Leader <*> for partition <*> is unavailable for fetching offset until reconnect backoff expires
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
ERROR org.apache.kafka.clients.consumer.internals.Fetcher: Discarding error in OffsetsForLeaderEpoch because another error is pending
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
TRACE org.apache.kafka.clients.admin.internals.AdminMetadataManager: Clearing cached controller node <*>.
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Requesting metadata update.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Coordinator discovery failed, refreshing metadata
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: FindCoordinator request hit fatal exception
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Coordinator discovery failed, refreshing metadata
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: (Re-)joining group
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending JoinGroup (<*>) to coordinator <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: (Re-)joining group
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending JoinGroup (<*>) to coordinator <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Request joining group due to: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Request joining group due to: <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
TRACE org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: <*> for mechanism=<*>: <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
INFO org.apache.kafka.clients.producer.KafkaProducer: Closing the Kafka producer with timeoutMillis = <*> ms.
INFO org.apache.kafka.clients.producer.KafkaProducer: Proceeding to force close the producer since pending requests could not be completed within timeout <*> ms.
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
INFO org.apache.kafka.common.utils.AppInfoParser: App info <*> for <*> unregistered
TRACE org.apache.kafka.common.memory.SimpleMemoryPool: released buffer of size <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor: <*> can be moved from consumer <*> to consumer <*> for a more balanced assignment.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.clients.admin.KafkaAdminClient$28: Server response mentioned unknown topic partition <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.security.kerberos.KerberosError: Kerberos return code could not be determined from <*> due to <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator$SyncGroupResponseHandler: Received successful SyncGroup response: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator$SyncGroupResponseHandler: Successfully synced group in generation <*>
DEBUG org.apache.kafka.common.network.SslTransportLayer: SSL peer is not authenticated, returning ANONYMOUS instead
DEBUG org.apache.kafka.common.network.SslTransportLayer: SSL handshake completed successfully with peerHost \'<*>\' peerPort <*> peerPrincipal \'<*>\' cipherSuite \'<*>\'
TRACE org.apache.kafka.common.network.SslTransportLayer: SSLHandshake FINISHED channelId <*>, appReadBuffer pos <*>, netReadBuffer pos <*>, netWriteBuffer pos <*> 
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Adding newly assigned partitions: <*>
DEBUG org.apache.kafka.common.record.LazyDownConversionRecordsSend: Down-converted records for partition <*> with length=<*>
INFO org.apache.kafka.clients.consumer.internals.SubscriptionState: Seeking to <*> offset of partition <*>
WARN org.apache.kafka.clients.ClientUtils: Couldn\'t resolve server <*> from <*> as DNS resolution failed for <*>
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Updating cluster metadata to <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module not specified in JAAS config
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
WARN org.apache.kafka.clients.admin.KafkaAdminClient: Overriding the default value for <*> (<*>) with the explicitly configured request timeout <*>
WARN org.apache.kafka.common.config.AbstractConfig: The configuration \'<*>\' was supplied but isn\'t a known config.
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka version: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka commitId: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka startTimeMs: <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient: Kafka admin client initialized
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Sending asynchronous auto-commit of offsets <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Failing OffsetCommit request since the consumer is not part of an active group
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
ERROR org.apache.kafka.common.network.SslTransportLayer: Renegotiation requested, but it is not supported, channelId <*>, appReadBuffer pos <*>, netReadBuffer pos <*>, netWriteBuffer pos <*> handshakeStatus <*>
ERROR org.apache.kafka.common.network.SslTransportLayer: Renegotiation requested, but it is not supported, channelId <*>, appReadBuffer pos <*>, netReadBuffer pos <*>, netWriteBuffer pos <*> handshakeStatus <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Request joining group due to: <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: (Re-)joining group
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending JoinGroup (<*>) to coordinator <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Starting the Kafka producer
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.clients.producer.KafkaProducer: <*> should be equal to or larger than <*> + <*>. Setting it to <*>.
INFO org.apache.kafka.clients.producer.KafkaProducer: Instantiated an idempotent producer.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.clients.ClientUtils: Couldn\'t resolve server <*> from <*> as DNS resolution failed for <*>
WARN org.apache.kafka.common.network.ChannelBuilders: Broker configuration \'<*>\' is applied only to SSL listeners. Listener-prefixed configuration can be used to enable SSL client authentication for SASL_SSL listeners. In future releases, broker-wide option without listener prefix may be applied to SASL_SSL listeners as well. All configuration options intended for specific listeners should be listener-prefixed.
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.common.config.AbstractConfig: The configuration \'<*>\' was supplied but isn\'t a known config.
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka version: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka commitId: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka startTimeMs: <*>
DEBUG org.apache.kafka.clients.producer.KafkaProducer: Kafka producer started
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
WARN org.apache.kafka.common.security.JaasContext: Server config <*> should be prefixed with SASL mechanism name, ignoring config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
DEBUG org.apache.kafka.common.security.JaasContext: System property \'java.security.auth.login.config\' and Kafka SASL property \'sasl.jaas.config\' are not set, using default JAAS configuration.
WARN org.apache.kafka.common.network.ChannelBuilders: Broker configuration \'<*>\' is applied only to SSL listeners. Listener-prefixed configuration can be used to enable SSL client authentication for SASL_SSL listeners. In future releases, broker-wide option without listener prefix may be applied to SASL_SSL listeners as well. All configuration options intended for specific listeners should be listener-prefixed.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
TRACE org.apache.kafka.clients.admin.internals.AdminMetadataManager: Clearing cached controller node <*>.
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Requesting metadata update.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Skipping transition to abortable error state since the transaction is already being aborted. Underlying exception: 
ERROR org.apache.kafka.clients.producer.internals.TransactionManager: The broker returned <*> for topic-partition <*> with producerId <*>, epoch <*>, and sequence number <*>
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Successfully produced messages to <*> with base offset <*>.
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Successfully produced messages to <*> with base offset <*>.
WARN org.apache.kafka.clients.producer.internals.Sender: Received invalid metadata error in produce request on partition <*> due to <*>. Going to request metadata update now
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.KafkaConsumer: Committing offsets: <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Invalid SASL mechanism response, server may be expecting only GSSAPI tokens
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Set SASL client state to <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator$ReauthInfo: Finished <*> with session expiration in <*> ms and session re-authentication on or after <*> ms
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
ERROR org.apache.kafka.clients.consumer.internals.Fetcher: Discarding error in OffsetsForLeaderEpoch because another error is pending
DEBUG org.apache.kafka.common.security.oauthbearer.secured.JaasOptionsUtils: Created SSLSocketFactory: <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule: No tokens to commit, this login cannot be used to establish client connections
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Client is not ready to send to <*>. Must delay <*> ms
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Assigned producerId <*> and producerEpoch <*> to batch with base sequence <*> being sent to partition <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.clients.producer.internals.RecordAccumulator: Skipping next batch expiry time update due to addition overflow: batch.createMs=<*>, deliveryTimeoutMs=<*>
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Reordered incoming batch with sequence <*> for partition <*>. It was placed in the queue at position <*>
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Reordered incoming batch with sequence <*> for partition <*>. It was placed in the queue at position <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator$HeartbeatThread: Enabling heartbeat thread
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Ignoring batch <*> with producer id <*>, epoch <*>, and sequence number <*> since the producer is already in fatal error state
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.clients.producer.KafkaProducer: Requesting metadata update for partition <*> of topic <*>.
TRACE org.apache.kafka.clients.producer.internals.RecordAccumulator: Allocating a new <*> byte message buffer for topic <*> partition <*> with remaining timeout <*>ms
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Retrying append due to new batch creation for topic <*> partition <*>. The old partition was <*>
TRACE org.apache.kafka.clients.producer.internals.RecordAccumulator: Allocating a new <*> byte message buffer for topic <*> partition <*> with remaining timeout <*>ms
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Begin adding new partition <*> to transaction
DEBUG org.apache.kafka.clients.producer.KafkaProducer: Exception occurred during message send:
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Reordered incoming batch with sequence <*> for partition <*>. It was placed in the queue at position <*>
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Reordered incoming batch with sequence <*> for partition <*>. It was placed in the queue at position <*>
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Reordered incoming batch with sequence <*> for partition <*>. It was placed in the queue at position <*>
TRACE org.apache.kafka.common.network.SslTransportLayer: SSLHandshake handshakeWrap <*>
WARN org.apache.kafka.common.security.ssl.DefaultSslEngineFactory: Unrecognized client authentication configuration <*>.  Falling back to NONE.  Recognized client authentication configurations are <*>.
INFO org.apache.kafka.clients.NetworkClient: Node <*> disconnected.
WARN org.apache.kafka.clients.NetworkClient: Connection to node <*> (<*>) terminated during authentication. This may happen due to any of the following reasons: () Authentication failed due to invalid credentials with brokers older than .., () Firewall blocking Kafka TLS traffic (eg it may only allow HTTPS traffic), () Transient network issue.
INFO org.apache.kafka.clients.NetworkClient: Cancelled in-flight <*> request with correlation id <*> due to node <*> being disconnected (elapsed time since creation: <*>ms, elapsed time since send: <*>ms, request timeout: <*>ms)
ERROR org.apache.kafka.clients.NetworkClient: Connection to node <*> (<*>) failed authentication due to: <*>
INFO org.apache.kafka.clients.NetworkClient: Cancelled in-flight <*> request with correlation id <*> due to node <*> being disconnected (elapsed time since creation: <*>ms, elapsed time since send: <*>ms, request timeout: <*>ms)
<INIT> org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule: Already logged in without a token
INFO org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Disconnecting from <*> due to timeout while awaiting <*>
DEBUG org.apache.kafka.clients.admin.internals.DescribeTransactionsHandler: DescribeTransactions request for transactionalId `<*>` returned error <*>. Will attempt to find the coordinator again and retry
<INIT> org.apache.kafka.common.protocol.Errors: NOT_ENOUGH_REPLICAS_AFTER_APPEND
<INIT> org.apache.kafka.common.protocol.Errors: INVALID_REQUEST
<INIT> org.apache.kafka.common.protocol.Errors: KAFKA_STORAGE_ERROR
<INIT> org.apache.kafka.common.protocol.Errors: LOG_DIR_NOT_FOUND
<INIT> org.apache.kafka.common.protocol.Errors: INCONSISTENT_TOPIC_ID
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Queueing <*> with a timeout <*> ms from now.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClient: Setting SASL/<*> client state to <*>
TRACE org.apache.kafka.clients.admin.internals.AdminMetadataManager: Clearing cached controller node <*>.
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Requesting metadata update.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Max retries <*> for <*> reached
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
INFO org.apache.kafka.common.network.SaslChannelBuilder: Failed to create channel due to 
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: <*> for mechanism=<*>: <*>
INFO org.apache.kafka.clients.NetworkClient: Client requested connection close from node <*>
INFO org.apache.kafka.clients.NetworkClient: Cancelled in-flight <*> request with correlation id <*> due to node <*> being disconnected (elapsed time since creation: <*>ms, elapsed time since send: <*>ms, request timeout: <*>ms)
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: close started
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: JWKS validation key refresh thread shutting down
WARN org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: JWKS validation key refresh thread termination did not end after <*> <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: close completed
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: entering performPendingMetricsOperations
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: removing metric <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: leaving performPendingMetricsOperations
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: closed <*> metric(s).
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: gauge suite is already closed.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Leader <*> for partition <*> is unavailable for fetching offset until reconnect backoff expires
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Sending ListOffsetRequest <*> to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Leader for partition <*> is unknown for fetching offset <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.network.SslTransportLayer: handshakeWrapAfterFailure status <*> doWrite <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.common.security.oauthbearer.secured.HttpAccessTokenRetriever: parseAccessToken - responseBody: <*>
DEBUG org.apache.kafka.common.security.ssl.SslFactory: Validation of dynamic config update of SSLFactory failed.
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> failed: <*>. Beginning retry #<*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> failed with non-retriable exception after <*> attempt(s)
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient: Raising WakeupException in response to user wakeup
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Coordinator discovery failed, refreshing metadata
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Skipping transition to abortable error state since the transaction is already being aborted. Underlying exception: 
ERROR org.apache.kafka.clients.producer.internals.TransactionManager: The broker returned <*> for topic-partition <*> with producerId <*>, epoch <*>, and sequence number <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
ERROR org.apache.kafka.clients.consumer.internals.Fetcher$3: Discarding error in ListOffsetResponse because another error is pending
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: Stickiness is violated for topic <*>\nPartition movements for this topic occurred among the following consumer pairs:\n<*>
TRACE org.apache.kafka.clients.consumer.KafkaConsumer: Closing the Kafka consumer
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
INFO org.apache.kafka.common.utils.AppInfoParser: App info <*> for <*> unregistered
DEBUG org.apache.kafka.clients.consumer.KafkaConsumer: Kafka consumer has been closed
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
DEBUG org.apache.kafka.common.network.Selector: Tracking closing connection <*> to process outstanding requests
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> failed: <*>. Beginning retry #<*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator$FindCoordinatorResponseHandler: FindCoordinator request failed due to <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Requesting metadata update for topic <*>.
INFO org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId set to <*> with epoch <*>
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Requesting metadata update for topic <*>.
TRACE org.apache.kafka.clients.producer.KafkaProducer: Attempting to append record <*> with callback <*> to topic <*> partition <*>
TRACE org.apache.kafka.clients.producer.internals.RecordAccumulator: Allocating a new <*> byte message buffer for topic <*> partition <*> with remaining timeout <*>ms
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.clients.producer.internals.RecordAccumulator: Allocating a new <*> byte message buffer for topic <*> partition <*> with remaining timeout <*>ms
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Waking up the sender since topic <*> partition <*> is either full or getting a new batch
DEBUG org.apache.kafka.clients.producer.KafkaProducer: Exception occurred during message send:
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
INFO org.apache.kafka.clients.admin.KafkaAdminClient: Retrying to fetch metadata.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
<INIT> org.apache.kafka.common.security.JaasConfig: Login module not specified in JAAS config
WARN org.apache.kafka.common.security.JaasContext: Server config <*> should be prefixed with SASL mechanism name, ignoring config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
DEBUG org.apache.kafka.common.security.JaasContext: System property \'java.security.auth.login.config\' and Kafka SASL property \'sasl.jaas.config\' are not set, using default JAAS configuration.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Trying to choose nodes for <*> at <*>
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Unable to assign <*> to a node.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Unable to choose node for <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> attempting protocol downgrade and then retry.
TRACE org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Unable to assign <*> to a node.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Unable to choose node for <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> failed: <*>. Beginning retry #<*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.HttpAccessTokenRetriever: parseAccessToken - responseBody: <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
INFO org.apache.kafka.clients.consumer.KafkaConsumer: Unsubscribed all topics or patterns and assigned partitions
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.clients.admin.internals.AdminMetadataManager: Clearing cached controller node <*>.
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Requesting metadata update.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.producer.internals.Sender: Starting Kafka producer I/O thread.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Skipping transition to abortable error state since the transaction is already being aborted. Underlying exception: 
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Skipping transition to abortable error state since the transaction is already being aborted. Underlying exception: 
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to abortable error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
ERROR org.apache.kafka.clients.producer.internals.Sender: Aborting producer batches due to fatal error
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Aborting batch for partition <*>
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Aborting batch for partition <*>
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Aborting batch for partition <*>
TRACE org.apache.kafka.clients.producer.internals.Sender: Authentication exception while processing transactional request
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Assigned producerId <*> and producerEpoch <*> to batch with base sequence <*> being sent to partition <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Assigned producerId <*> and producerEpoch <*> to batch with base sequence <*> being sent to partition <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Assigned producerId <*> and producerEpoch <*> to batch with base sequence <*> being sent to partition <*>
WARN org.apache.kafka.clients.producer.internals.RecordAccumulator: Skipping next batch expiry time update due to addition overflow: batch.createMs=<*>, deliveryTimeoutMs=<*>
WARN org.apache.kafka.clients.producer.internals.RecordAccumulator: Skipping next batch expiry time update due to addition overflow: batch.createMs=<*>, deliveryTimeoutMs=<*>
WARN org.apache.kafka.clients.producer.internals.RecordAccumulator: Skipping next batch expiry time update due to addition overflow: batch.createMs=<*>, deliveryTimeoutMs=<*>
WARN org.apache.kafka.clients.producer.internals.RecordAccumulator: Skipping next batch expiry time update due to addition overflow: batch.createMs=<*>, deliveryTimeoutMs=<*>
WARN org.apache.kafka.clients.producer.internals.RecordAccumulator: Skipping next batch expiry time update due to addition overflow: batch.createMs=<*>, deliveryTimeoutMs=<*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Skipping transition to abortable error state since the transaction is already being aborted. Underlying exception: 
ERROR org.apache.kafka.clients.producer.internals.TransactionManager: The broker returned <*> for topic-partition <*> with producerId <*>, epoch <*>, and sequence number <*>
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Failed to produce messages to <*> with base offset <*>.
DEBUG org.apache.kafka.clients.producer.internals.ProducerBatch: Ignored state transition <*> -> <*> for <*> batch with base offset <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to abortable error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
ERROR org.apache.kafka.clients.producer.internals.TransactionManager: The broker returned <*> for topic-partition <*> with producerId <*>, epoch <*>, and sequence number <*>
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Failed to produce messages to <*> with base offset <*>.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Marking partition <*> unresolved with next sequence number <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Marking partition <*> unresolved with next sequence number <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.clients.producer.internals.Sender: Nodes with data ready to send: <*>
TRACE org.apache.kafka.clients.producer.internals.Sender: Sent produce request to <*>: <*>
TRACE org.apache.kafka.clients.producer.internals.Sender: Sent produce request to <*>: <*>
TRACE org.apache.kafka.clients.producer.internals.Sender: Sent produce request to <*>: <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId set to <*> with epoch <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Incremented producer epoch, current producer ID and epoch are now <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
TRACE org.apache.kafka.clients.producer.internals.TransactionManager: Not sending transactional request <*> because we are in an error state
TRACE org.apache.kafka.clients.producer.internals.Sender: Authentication exception while processing transactional request
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: No inflight batches remaining for <*>, last ack\'d sequence for partition is <*>, next sequence is <*>. Going to bump epoch and reset sequence numbers.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Resetting idempotent producer ID. ID and epoch before reset are <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId set to <*> with epoch <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
TRACE org.apache.kafka.clients.producer.internals.TransactionManager: Request <*> dequeued for sending
DEBUG org.apache.kafka.clients.producer.internals.Sender: Sending transactional request <*> to node <*> with correlation ID <*>
DEBUG org.apache.kafka.clients.producer.internals.Sender: Disconnect from <*> while trying to send request <*>. Going to back off and retry.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
TRACE org.apache.kafka.clients.producer.internals.Sender: Authentication exception while processing transactional request
DEBUG org.apache.kafka.clients.producer.internals.Sender: Beginning shutdown of Kafka producer I/O thread, sending remaining records.
INFO org.apache.kafka.clients.producer.internals.Sender: Aborting incomplete transaction due to shutdown
DEBUG org.apache.kafka.clients.producer.internals.Sender: Aborting incomplete transactional requests due to forced shutdown
DEBUG org.apache.kafka.clients.producer.internals.Sender: Aborting incomplete batches due to forced shutdown
DEBUG org.apache.kafka.clients.producer.internals.Sender: Shutdown of Kafka producer I/O thread has completed.
<INIT> org.apache.kafka.common.message.DescribeLogDirsResponseData$DescribeLogDirsResult: non-nullable field logDir was serialized as null
DEBUG org.apache.kafka.clients.ClientUtils: Resolved host <*> as <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
ERROR org.apache.kafka.clients.admin.internals.DescribeProducersHandler: Unexpected error in `DescribeProducers` response for partition <*>
ERROR org.apache.kafka.clients.admin.internals.DescribeProducersHandler: Authorization failed in `DescribeProducers` response for partition <*>
ERROR org.apache.kafka.clients.admin.internals.DescribeProducersHandler: Invalid topic in `DescribeProducers` response for partition <*>
WARN org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientCallbackHandler: Found <*> OAuth Bearer tokens in Subject\'s private credentials; the oldest expires at <*>, will use the newest, which expires at <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.clients.admin.internals.ListConsumerGroupOffsetsHandler: Skipping return offset for <*> due to error <*>.
INFO org.apache.kafka.clients.FetchSessionHandler: Error sending fetch request <*> to node <*>:
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Skipping validation of fetch offsets for partitions <*> since the broker does not support the required protocol version (introduced in Kafka .)
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Set SASL client state to <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator$ReauthInfo: Finished <*> with session expiration in <*> ms and session re-authentication on or after <*> ms
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Ignoring batch <*> with producer id <*>, epoch <*>, and sequence number <*> since the producer is already in fatal error state
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Failed to produce messages to <*> with base offset <*>.
DEBUG org.apache.kafka.clients.producer.internals.ProducerBatch: Ignored state transition <*> -> <*> for <*> batch with base offset <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
TRACE org.apache.kafka.clients.admin.internals.AdminMetadataManager: Clearing cached controller node <*>.
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Requesting metadata update.
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: Stickiness is violated for topic <*>\nPartition movements for this topic occurred among the following consumer pairs:\n<*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Starting the Kafka producer
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.clients.producer.KafkaProducer: <*> should be equal to or larger than <*> + <*>. Setting it to <*>.
INFO org.apache.kafka.clients.producer.KafkaProducer: Instantiated an idempotent producer.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.clients.ClientUtils: Couldn\'t resolve server <*> from <*> as DNS resolution failed for <*>
WARN org.apache.kafka.common.network.ChannelBuilders: Broker configuration \'<*>\' is applied only to SSL listeners. Listener-prefixed configuration can be used to enable SSL client authentication for SASL_SSL listeners. In future releases, broker-wide option without listener prefix may be applied to SASL_SSL listeners as well. All configuration options intended for specific listeners should be listener-prefixed.
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
WARN org.apache.kafka.common.config.AbstractConfig: The configuration \'<*>\' was supplied but isn\'t a known config.
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka version: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka commitId: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka startTimeMs: <*>
DEBUG org.apache.kafka.clients.producer.KafkaProducer: Kafka producer started
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: Removed a reference to <*>.  <*> reference(s) remaining.
DEBUG org.apache.kafka.common.network.Selector: Immediately connected to node <*>
<INIT> org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule$LoginState: NOT_LOGGED_IN
<INIT> org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule$LoginState: LOGGED_IN_NOT_COMMITTED
<INIT> org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule$LoginState: COMMITTED
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: close started
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: JWKS validation key refresh thread shutting down
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: close completed
TRACE org.apache.kafka.common.memory.SimpleMemoryPool: released buffer of size <*>
DEBUG org.apache.kafka.clients.NetworkClient: Client requested disconnect from node <*>, which is already disconnected
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
INFO org.apache.kafka.clients.Metadata: Resetting the last seen epoch of partition <*> to <*> since the associated topicId changed from <*> to <*>
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Reordered incoming batch with sequence <*> for partition <*>. It was placed in the queue at position <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka version: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka commitId: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka startTimeMs: <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Handling Kafka request <*> during <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Using SASL mechanism \'<*>\' provided by client
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Creating SaslServer for <*> with mechanism <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Setting bootstrap cluster metadata <*>.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.admin.internals.CoordinatorStrategy: FindCoordinator request for key <*> returned topic-level error <*>. Will retry
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Skipping validation of fetch offsets for partitions <*> since the broker does not support the required protocol version (introduced in Kafka .)
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
ERROR org.apache.kafka.common.config.provider.DirectoryConfigProvider: Could not read file <*> for property <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId set to <*> with epoch <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.clients.consumer.KafkaConsumer: Closing the Kafka consumer
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
INFO org.apache.kafka.common.utils.AppInfoParser: App info <*> for <*> unregistered
DEBUG org.apache.kafka.clients.consumer.KafkaConsumer: Kafka consumer has been closed
WARN org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Asynchronous auto-commit of offsets <*> failed: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Begin adding new partition <*> to transaction
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Set SASL client state to <*>
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator$ReauthInfo: Finished <*> with no session expiration and no session re-authentication
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
DEBUG org.apache.kafka.common.record.ControlRecordType: Received unknown control record key version <*>. Parsing as version <*>
DEBUG org.apache.kafka.common.record.ControlRecordType: Received unknown control record key version <*>. Parsing as version <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
ERROR org.apache.kafka.common.serialization.ListDeserializer: Failed to construct list due to 
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
DEBUG org.apache.kafka.clients.admin.internals.AllBrokersStrategy: Discovered all brokers <*> to send requests to
WARN org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLogin: [Principal=<*>]: Expiring credential already expired at <*>: will try to refresh again at <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: No broker available to send FindCoordinator request
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientCallbackHandler: Found <*> OAuth Bearer tokens in Subject\'s private credentials; the oldest expires at <*>, will use the newest, which expires at <*>
WARN org.apache.kafka.clients.ClientUtils: Couldn\'t resolve server <*> from <*> as DNS resolution of the canonical hostname <*> failed for <*>
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Updating cluster metadata to <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
<INIT> org.apache.kafka.common.security.JaasConfig: Login module not specified in JAAS config
WARN org.apache.kafka.common.network.ChannelBuilders: Broker configuration \'<*>\' is applied only to SSL listeners. Listener-prefixed configuration can be used to enable SSL client authentication for SASL_SSL listeners. In future releases, broker-wide option without listener prefix may be applied to SASL_SSL listeners as well. All configuration options intended for specific listeners should be listener-prefixed.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
WARN org.apache.kafka.clients.admin.KafkaAdminClient: Overriding the default value for <*> (<*>) with the explicitly configured request timeout <*>
WARN org.apache.kafka.common.config.AbstractConfig: The configuration \'<*>\' was supplied but isn\'t a known config.
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka version: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka commitId: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka startTimeMs: <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient: Kafka admin client initialized
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Queueing <*> with a timeout <*> ms from now.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
INFO org.apache.kafka.common.metrics.Metrics: Metrics scheduler closed
INFO org.apache.kafka.common.metrics.Metrics: Metrics reporters closed
TRACE org.apache.kafka.clients.NetworkClient: Found least loaded node <*> with <*> inflight requests
DEBUG org.apache.kafka.clients.NetworkClient$DefaultMetadataUpdater: Sending metadata request <*> to node <*>
DEBUG org.apache.kafka.clients.NetworkClient: Sending <*> request with header <*> and timeout <*> to node <*>: <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.KafkaConsumer: Initializing the Kafka consumer
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.clients.ClientUtils: Couldn\'t resolve server <*> from <*> as DNS resolution of the canonical hostname <*> failed for <*>
<INIT> org.apache.kafka.common.security.JaasConfig: Login module control flag not specified in JAAS config
<INIT> org.apache.kafka.common.security.JaasContext: JAAS config property does not contain any login modules
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
WARN org.apache.kafka.common.config.AbstractConfig: The configuration \'<*>\' was supplied but isn\'t a known config.
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka version: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka commitId: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka startTimeMs: <*>
DEBUG org.apache.kafka.clients.consumer.KafkaConsumer: Kafka consumer initialized
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator$LeaveGroupResponseHandler: LeaveGroup response with <*> returned successfully: <*>
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Starting the Kafka producer
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.clients.producer.KafkaProducer: <*> should be equal to or larger than <*> + <*>. Setting it to <*>.
INFO org.apache.kafka.clients.producer.KafkaProducer: Instantiated an idempotent producer.
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
WARN org.apache.kafka.clients.ClientUtils: Couldn\'t resolve server <*> from <*> as DNS resolution of the canonical hostname <*> failed for <*>
WARN org.apache.kafka.common.network.ChannelBuilders: Broker configuration \'<*>\' is applied only to SSL listeners. Listener-prefixed configuration can be used to enable SSL client authentication for SASL_SSL listeners. In future releases, broker-wide option without listener prefix may be applied to SASL_SSL listeners as well. All configuration options intended for specific listeners should be listener-prefixed.
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
WARN org.apache.kafka.common.config.AbstractConfig: The configuration \'<*>\' was supplied but isn\'t a known config.
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka version: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka commitId: <*>
INFO org.apache.kafka.common.utils.AppInfoParser$AppInfo: Kafka startTimeMs: <*>
DEBUG org.apache.kafka.clients.producer.KafkaProducer: Kafka producer started
<INIT> org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandler: Extensions provided in login context without a token
TRACE org.apache.kafka.clients.admin.internals.AdminMetadataManager: Clearing cached controller node <*>.
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Requesting metadata update.
DEBUG org.apache.kafka.clients.admin.internals.AdminApiDriver: Node disconnected before response could be received for request <*>. Will attempt retry
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.producer.internals.Sender: Starting Kafka producer I/O thread.
INFO org.apache.kafka.clients.producer.internals.TransactionManager: No inflight batches remaining for <*>, last ack\'d sequence for partition is <*>, next sequence is <*>. Going to bump epoch and reset sequence numbers.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Not sending EndTxn for completed transaction since no partitions or offsets were successfully added
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
TRACE org.apache.kafka.clients.producer.internals.TransactionManager: Request <*> dequeued for sending
TRACE org.apache.kafka.clients.producer.internals.Sender: Target node <*> not ready within request timeout, will retry when node is ready.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.producer.internals.Sender: Disconnect from <*> while trying to send request <*>. Going to back off and retry.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Assigned producerId <*> and producerEpoch <*> to batch with base sequence <*> being sent to partition <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Assigned producerId <*> and producerEpoch <*> to batch with base sequence <*> being sent to partition <*>
WARN org.apache.kafka.clients.producer.internals.RecordAccumulator: Skipping next batch expiry time update due to addition overflow: batch.createMs=<*>, deliveryTimeoutMs=<*>
WARN org.apache.kafka.clients.producer.internals.RecordAccumulator: Skipping next batch expiry time update due to addition overflow: batch.createMs=<*>, deliveryTimeoutMs=<*>
WARN org.apache.kafka.clients.producer.internals.RecordAccumulator: Skipping next batch expiry time update due to addition overflow: batch.createMs=<*>, deliveryTimeoutMs=<*>
WARN org.apache.kafka.clients.producer.internals.RecordAccumulator: Skipping next batch expiry time update due to addition overflow: batch.createMs=<*>, deliveryTimeoutMs=<*>
TRACE org.apache.kafka.clients.producer.internals.Sender: Expired <*> batches in accumulator
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.clients.producer.internals.Sender: Sent produce request to <*>: <*>
TRACE org.apache.kafka.clients.producer.internals.Sender: Sent produce request to <*>: <*>
TRACE org.apache.kafka.clients.producer.internals.Sender: Sent produce request to <*>: <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
INFO org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId set to <*> with epoch <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Incremented producer epoch, current producer ID and epoch are now <*>
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Aborting batch for partition <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Not sending EndTxn for completed transaction since no partitions or offsets were successfully added
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to error state <*>
TRACE org.apache.kafka.clients.producer.internals.TransactionManager: Request <*> dequeued for sending
DEBUG org.apache.kafka.clients.producer.internals.Sender: Sending transactional request <*> to node <*> with correlation ID <*>
DEBUG org.apache.kafka.clients.producer.internals.Sender: Disconnect from <*> while trying to send request <*>. Going to back off and retry.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
TRACE org.apache.kafka.clients.producer.internals.Sender: Authentication exception while processing transactional request
INFO org.apache.kafka.clients.producer.internals.TransactionManager: Transiting to fatal error state due to <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Transition from state <*> to <*>
DEBUG org.apache.kafka.clients.producer.internals.Sender: Beginning shutdown of Kafka producer I/O thread, sending remaining records.
DEBUG org.apache.kafka.clients.producer.internals.Sender: Shutdown of Kafka producer I/O thread has completed.
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Set SASL client state to <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.CommonClientConfigs: Disabling exponential reconnect backoff because <*> is set, but <*> is not.
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: Stickiness is violated for topic <*>\nPartition movements for this topic occurred among the following consumer pairs:\n<*>
DEBUG org.apache.kafka.common.security.authenticator.SaslClientAuthenticator: Set SASL client state to <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient: Moving hard shutdown time forward.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient: Kafka admin client closed.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.common.memory.GarbageCollectedMemoryPool: released buffer of size <*> and identity <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: close started
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: close started
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: JWKS validation key refresh thread shutting down
WARN org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: JWKS validation key refresh thread termination did not end after <*> <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: close completed
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: close completed
DEBUG org.apache.kafka.clients.Metadata: Updating last seen epoch for partition <*> from <*> to epoch <*> from new metadata
DEBUG org.apache.kafka.common.record.ControlRecordType: Received unknown control record key version <*>. Parsing as version <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
ERROR org.apache.kafka.clients.admin.internals.ListTransactionsHandler: The `ListTransactions` request sent to broker <*> failed because of an unexpected error <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator$FindCoordinatorResponseHandler: Received FindCoordinator response <*>
ERROR org.apache.kafka.clients.producer.internals.TransactionManager$FindCoordinatorHandler: Group coordinator lookup failed: Invalid response containing more than a single coordinator
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Max retries <*> for <*> reached
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: A cycle of length <*> was found: <*>
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor$PartitionMovements: Stickiness is violated for topic <*>\nPartition movements for this topic occurred among the following consumer pairs:\n<*>
DEBUG org.apache.kafka.common.security.authenticator.SaslServerAuthenticator: Set SASL server state to <*> during <*>
TRACE org.apache.kafka.common.network.NetworkReceive: Broker low on memory - could not allocate buffer of size <*> for source <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.common.metrics.internals.IntGaugeSuite: <*>: created new gauge suite with maxEntries = <*>.
TRACE org.apache.kafka.clients.admin.internals.AdminMetadataManager: Metadata is not ready: bootstrap nodes have not been initialized yet.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Resetting generation <*>due to: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Request joining group due to: <*>
INFO org.apache.kafka.common.security.authenticator.SaslServerCallbackHandler: Successfully authenticated client: authenticationID=<*>; authorizationID=<*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Begin adding offsets <*> for consumer group <*> to transaction
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: Enqueuing transactional request <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending Heartbeat request with generation <*> and member id <*> to coordinator <*>
TRACE org.apache.kafka.clients.admin.internals.AdminMetadataManager: Clearing cached controller node <*>.
DEBUG org.apache.kafka.clients.admin.internals.AdminMetadataManager: Requesting metadata update.
WARN org.apache.kafka.clients.admin.KafkaAdminClient$3: Server response mentioned unknown topic ID <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Queueing <*> with a timeout <*> ms from now.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient thread has exited. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Reordered incoming batch with sequence <*> for partition <*>. It was placed in the queue at position <*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: The AdminClient is not accepting new calls. Timing out <*>.
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
WARN org.apache.kafka.clients.producer.internals.Sender: Cancelled request <*> due to a version mismatch with node <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId: <*>; Set last ack\'d sequence number for topic-partition <*> to <*>
TRACE org.apache.kafka.clients.producer.internals.TransactionManager: Partition <*> keeps lastOffset at <*>
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Successfully produced messages to <*> with base offset <*>.
WARN org.apache.kafka.clients.producer.internals.Sender: Received invalid metadata error in produce request on partition <*> due to <*>. Going to request metadata update now
WARN org.apache.kafka.clients.producer.internals.Sender: Got error produce response with correlation id <*> on topic-partition <*>, retrying (<*> attempts left). Error: <*>
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Reordered incoming batch with sequence <*> for partition <*>. It was placed in the queue at position <*>
WARN org.apache.kafka.clients.producer.internals.Sender: Received invalid metadata error in produce request on partition <*> due to <*>. Going to request metadata update now
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
TRACE org.apache.kafka.clients.producer.internals.Sender: Received produce response from node <*> with correlation id <*>
TRACE org.apache.kafka.clients.producer.internals.ProducerBatch: Failed to produce messages to <*> with base offset <*>.
INFO org.apache.kafka.clients.consumer.KafkaConsumer: Seeking to offset <*> for partition <*>
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Asynchronous auto-commit of offsets <*> failed due to retriable error: <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwks: For key ID <*>, nextCheckTime: <*>, currTime: <*>
DEBUG org.apache.kafka.common.security.oauthbearer.secured.RefreshingHttpsJwksVerificationKeyResolver: Refreshing JWKs from <*> as no suitable verification key for JWS w/ header <*> was found in <*>
INFO org.apache.kafka.clients.FetchSessionHandler: Error sending fetch request <*> to node <*>:
INFO org.apache.kafka.common.network.SaslChannelBuilder: Configured native GSSAPI private credentials for <*>@<*>
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable: Max retries <*> for <*> reached
DEBUG org.apache.kafka.clients.admin.KafkaAdminClient$Call: <*> timed out at <*> after <*> attempt(s)
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
INFO org.apache.kafka.clients.consumer.internals.SubscriptionState: Seeking to <*> offset of partition <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager$AddOffsetsToTxnHandler: Successfully added partition for consumer group <*> to transaction
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Added sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager: ProducerId of partition <*> set to <*> with epoch <*>. Reinitialize sequence at beginning.
DEBUG org.apache.kafka.clients.producer.internals.RecordAccumulator: Assigned producerId <*> and producerEpoch <*> to batch with base sequence <*> being sent to partition <*>
ERROR org.apache.kafka.clients.admin.internals.DeleteConsumerGroupsHandler: `DeleteConsumerGroups` request for group id <*> failed due to unexpected error <*>
DEBUG org.apache.kafka.common.record.ControlRecordType: Received unknown control record key version <*>. Parsing as version <*>
TRACE org.apache.kafka.clients.producer.KafkaProducer: Requesting metadata update for topic <*>.
ERROR org.apache.kafka.clients.consumer.internals.AbstractStickyAssignor: The consumer <*> is assigned more partitions than the maximum possible.
DEBUG org.apache.kafka.clients.admin.internals.FenceProducersHandler: InitProducerId request for transactionalId `<*>` failed because the coordinator is still in the process of loading state. Will retry
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed sensor with name <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Removed metric named <*>
TRACE org.apache.kafka.common.metrics.Metrics: Registered metric named <*>
TRACE org.apache.kafka.clients.consumer.internals.Fetcher: Not fetching from <*> for partition <*> since it is marked offline or is missing from our metadata, using the leader instead.
TRACE org.apache.kafka.clients.consumer.internals.Fetcher: Not fetching from <*> for partition <*> since it is marked offline or is missing from our metadata, using the leader instead.
TRACE org.apache.kafka.clients.consumer.internals.Fetcher: Not fetching from <*> for partition <*> since it is marked offline or is missing from our metadata, using the leader instead.
DEBUG org.apache.kafka.clients.consumer.internals.Fetcher: Added <*> fetch request for partition <*> at position <*> to node <*>
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
WARN org.apache.kafka.common.protocol.Errors: Unexpected error code: <*>.
DEBUG org.apache.kafka.clients.producer.internals.TransactionManager$TxnOffsetCommitHandler: Received TxnOffsetCommit response for consumer group <*>: <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending follower SyncGroup to coordinator <*>: <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
TRACE org.apache.kafka.clients.consumer.KafkaConsumer: Closing the Kafka consumer
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Sending synchronous auto-commit of offsets <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
TRACE org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Sending OffsetCommit request with <*> to coordinator <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Failing OffsetCommit request since the consumer is not part of an active group
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Consumer has been disconnected from the group coordinator for <*>ms
INFO org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: Failing OffsetCommit request since the consumer is not part of an active group
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
DEBUG org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler: Cancelled request with header <*> due to node <*> being disconnected
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Coordinator discovery failed, refreshing metadata
DEBUG org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Sending FindCoordinator request to broker <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: FindCoordinator request hit fatal exception
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Group coordinator <*> is unavailable or invalid due to cause: <*>.isDisconnected: <*>. Rediscovery will be attempted.
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Requesting disconnect from last known coordinator <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Resetting generation <*>due to: <*>
INFO org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Request joining group due to: <*>
WARN org.apache.kafka.clients.consumer.internals.AbstractCoordinator: Close timed out with <*> pending requests to coordinator, terminating client connections